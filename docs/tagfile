<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>ofx::Media::AbstractMediaTypeProvider</name>
    <filename>classofx_1_1_media_1_1_abstract_media_type_provider.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getMediaDescription</name>
      <anchorfile>classofx_1_1_media_1_1_abstract_media_type_provider.html</anchorfile>
      <anchor>a01194f4bc28218930e16d58d7f9ab27a</anchor>
      <arglist>(const Poco::Path &amp;path, bool examineCompressed) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ofx::Media::MediaTypeMap</name>
    <filename>classofx_1_1_media_1_1_media_type_map.html</filename>
    <base>ofx::Media::AbstractMediaTypeProvider</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MediaTypeMap &gt;</type>
      <name>SharedPtr</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a5acdc13d07279df5b8ca6f9b090e7ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, Poco::Net::MediaType &gt;</type>
      <name>FileSuffixToMediaTypeMap</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a7ea5b55da14b2002ea0a06f82139f091</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FileSuffixToMediaTypeMap::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a6f6177995f992afb21b9337576e3ad48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MediaTypeMap</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>ab17e21583103cace5c89383ca53378a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MediaTypeMap</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a306f653d4950a87c79a6322ed12e7ae7</anchor>
      <arglist>(const std::string &amp;mimeTypesFile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MediaTypeMap</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>afaaca64153819312fb4cd5034aa0b6b2</anchor>
      <arglist>(const std::string &amp;mimeTypesFile, const std::string &amp;defaultMediaType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MediaTypeMap</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>addd2a00b02862ef0e02a4374269faf7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Poco::Net::MediaType</type>
      <name>getMediaTypeForPath</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a49ff49984c9f24e6d3843c2876669246</anchor>
      <arglist>(const Poco::Path &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMediaDescription</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>ad2ac5e4fd2517d66851cbe3a9cc674d6</anchor>
      <arglist>(const Poco::Path &amp;path, bool bExamineCompressed) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a8948e8677f4ddb591b02bac36f7be070</anchor>
      <arglist>(const std::string &amp;suffix, const Poco::Net::MediaType &amp;mediaType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a327cb4ede806baf0fbc0560dbe8a1022</anchor>
      <arglist>(std::istream &amp;inputStream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>af841dd27b69bae14e8046d23b60ea01a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Poco::Net::MediaType</type>
      <name>getDefaultMediaType</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a0a102c33d8630232a736ccf941dee73e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultMediaType</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a00d60ab7401db8448b4d65c290b22479</anchor>
      <arglist>(const Poco::Net::MediaType &amp;defaultMediaType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SharedPtr</type>
      <name>getDefault</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>aa7174f3c1f74b4ee9d83bb764ae6892f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FileSuffixToMediaTypeMap</type>
      <name>parse</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a985428fb560cc42d57360988724eaebc</anchor>
      <arglist>(std::istream &amp;inputStream)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_MEDIA_TYPE</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>acd921d2f8acb2bcd57e5406b0c8f93f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_APACHE_MIME_TYPES_PATH</name>
      <anchorfile>classofx_1_1_media_1_1_media_type_map.html</anchorfile>
      <anchor>a30dc87aaa9ddc8a4488af54719fede45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/Users/bakercp/Programming/c-cpp/of-my/openFrameworks/addons/ofxMediaType/libs/ofxMediaType/include/</path>
    <filename>dir_140fa67c353817763ab663cb1dccbebf.html</filename>
    <dir>ofx</dir>
  </compound>
  <compound kind="dir">
    <name>libs</name>
    <path>/Users/bakercp/Programming/c-cpp/of-my/openFrameworks/addons/ofxMediaType/libs/</path>
    <filename>dir_8fd934be66cc8b4ac77e8111b84d1a53.html</filename>
    <dir>ofxMediaType</dir>
  </compound>
  <compound kind="dir">
    <name>Media</name>
    <path>/Users/bakercp/Programming/c-cpp/of-my/openFrameworks/addons/ofxMediaType/libs/ofxMediaType/include/ofx/Media/</path>
    <filename>dir_ae60b48468a2d060cf3af4e5b3a305ac.html</filename>
    <file>AbstractMediaTypeProvider.h</file>
    <file>MediaTypeMap.h</file>
  </compound>
  <compound kind="dir">
    <name>ofx</name>
    <path>/Users/bakercp/Programming/c-cpp/of-my/openFrameworks/addons/ofxMediaType/libs/ofxMediaType/include/ofx/</path>
    <filename>dir_3ea49c7c80d8ba0f4e843b6811e74b9f.html</filename>
    <dir>Media</dir>
  </compound>
  <compound kind="dir">
    <name>ofxMediaType</name>
    <path>/Users/bakercp/Programming/c-cpp/of-my/openFrameworks/addons/ofxMediaType/libs/ofxMediaType/</path>
    <filename>dir_cff13e2ef0cd90b8b07629a03ed39476.html</filename>
    <dir>include</dir>
    <dir>src</dir>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/Users/bakercp/Programming/c-cpp/of-my/openFrameworks/addons/ofxMediaType/src/</path>
    <filename>dir_8165a3e4fb127e562d8ead3895f7132d.html</filename>
    <file>ofxMediaType.h</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/Users/bakercp/Programming/c-cpp/of-my/openFrameworks/addons/ofxMediaType/libs/ofxMediaType/src/</path>
    <filename>dir_9c0efdb9f06b74c2a69b7c8f31e1461a.html</filename>
    <file>MediaTypeMap.cpp</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
  </compound>
</tagfile>
